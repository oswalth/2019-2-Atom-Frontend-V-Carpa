{"version":3,"sources":["styles/DialogueItem.module.css","styles/ChatHeader.module.css","styles/DialoguesHeader.module.css","styles/MessageForm.module.css","styles/MessageItem.module.css","styles/DialogueForm.module.css","styles/FormInput.module.css","styles/MainForm.module.css","styles/CreateDialogueButton.module.css","utils/serviceWorker.js","components/DialoguesHeader.js","components/MyContext.Context.js","components/DialogueItem.js","components/CreateDialogueButton.js","components/DialogueForm.js","components/ChatHeader.js","components/FormInput.js","components/MessageItem.js","components/MessageForm.js","components/MainForm.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","DialoguesHeader","className","styles","header","menuBurger","messenger","searchButton","MyContext","React","createContext","DialogueItem","props","chat","formattedTime","Date","lastMessage","time","Consumer","value","onClick","openDialogue","bind","id","dialogue","avatar","wrapper","text","name","title","toLocaleString","hour","minute","info","message","content","status","CreateDialogueButton","createHandler","createDialogueButton","DialogueForm","chats","dialogues","length","empty","forEach","dialogueItem","push","dialogueList","ChatHeader","details","clickBack","backButton","chatInfo","senderInfo","settingsButton","FormInput","input","useRef","messageHandler","onSubmit","current","trim","formInput","attachButton","onKeyPress","event","charCode","ref","placeholder","sendButton","MessageItem","inner","messageWrap","messageItem","timestamp","MessageForm","messages","style","messagesToRender","element","messageForm","closeDialogue","messagesList","inputForm","MainForm","storage","parseStorage","state","chatCounter","currentDialogue","MessageFormAppearance","frameStyles","DialoguesFormAppearance","JSON","parse","localStorage","getItem","chatId","this","animationName","chatAppearance","setState","chatDisappear","chatTimestamp","amISender","setLastMessage","setItem","stringify","prompt","chatMsgs","is_group","host","chatMessages","Provider","container","Component","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,SAAW,+BAA+B,OAAS,6BAA6B,QAAU,8BAA8B,KAAO,2BAA2B,KAAO,2BAA2B,KAAO,2BAA2B,KAAO,2BAA2B,QAAU,8BAA8B,OAAS,+B,gBCAnUD,EAAOC,QAAU,CAAC,OAAS,2BAA2B,WAAa,+BAA+B,SAAW,6BAA6B,OAAS,2BAA2B,WAAa,+BAA+B,aAAe,iCAAiC,eAAiB,qC,gBCA3RD,EAAOC,QAAU,CAAC,OAAS,gCAAgC,WAAa,oCAAoC,UAAY,mCAAmC,aAAe,wC,gBCA1KD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,aAAe,kCAAkC,OAAS,4BAA4B,KAAO,0BAA0B,UAAY,iC,gBCApMD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,YAAc,iCAAiC,QAAU,6BAA6B,UAAY,iC,gBCAnKD,EAAOC,QAAU,CAAC,UAAY,gCAAgC,cAAgB,oCAAoC,MAAQ,8B,gBCA1HD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,aAAe,gCAAgC,WAAa,gC,gBCAvHD,EAAOC,QAAU,CAAC,UAAY,4BAA4B,cAAgB,gCAAgC,eAAiB,mC,qBCA3HD,EAAOC,QAAU,CAAC,qBAAuB,qD,+HCWrBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,4ECX5B,SAASC,IACd,OACM,yBAAKC,UAAWC,IAAOC,QACnB,yBAAKF,UAAWC,IAAOE,aACvB,yBAAKH,UAAWC,IAAOG,WAAvB,aACA,yBAAKJ,UAAWC,IAAOI,gB,oBCPpBC,EAFGC,IAAMC,cAAc,MCM/B,SAASC,EAAaC,GAAQ,IAC3BC,EAASD,EAATC,KACFC,EAAgB,IAAIC,KAAKF,EAAKG,YAAYC,MAChD,OACM,kBAAC,EAAUC,SAAX,MACK,SAACC,GAAD,OACG,yBAAKC,QAASD,EAAME,aAAaC,KAAKH,EAAON,EAAKU,IAAKrB,UAAWC,IAAOqB,UACrE,yBAAKtB,UAAWC,IAAOsB,SACvB,yBAAKvB,UAAWC,IAAOuB,SACnB,yBAAKxB,UAAWC,IAAOwB,MACnB,yBAAKzB,UAAWC,IAAOyB,MAAOf,EAAKgB,OACnC,yBAAK3B,UAAWC,IAAOc,MAAOH,EAAcgB,eAAe,KAAM,CAC/DC,KAAM,UACNC,OAAQ,cAGd,yBAAK9B,UAAWC,IAAO8B,MACnB,yBAAK/B,UAAWC,IAAO+B,SAAUrB,EAAKG,YAAYmB,SAClD,yBAAKjC,UAAWC,IAAOiC,QAASvB,EAAKG,YAAYoB,c,qBCtBtE,SAASC,EAAqBzB,GAAQ,IACnC0B,EAAkB1B,EAAlB0B,cACR,OACM,4BACIlB,QAASkB,EAAepC,UAAWC,IAAOoC,uBCE/C,SAASC,EAAa5B,GAAQ,IAC3B6B,EAAU7B,EAAV6B,MAEJC,EAAY,GAUhB,OATqB,IAAjBD,EAAME,OACRD,EAAY,yBAAKxC,UAAWC,IAAOyC,OAAvB,mBAEZH,EAAMI,SAAQ,SAAChC,GACb,IAAMiC,EAAe,kBAACnC,EAAD,CAAcE,KAAMA,IACzC6B,EAAUK,KAAKD,MAKb,yBAAK5C,UAAWC,IAAOuC,WACnB,kBAACzC,EAAD,MACA,yBAAKC,UAAWC,IAAO6C,cAClBN,GAEL,kBAAC,EAAUxB,SAAX,MACK,SAACC,GAAD,OACG,kBAACkB,EAAD,CAAsBC,cAAenB,EAAMmB,cAAchB,KAAKH,S,oCCzB3E,SAAS8B,EAAWrC,GAAQ,IACzBsC,EAAuBtC,EAAvBsC,QAASC,EAAcvC,EAAduC,UAEjB,OACM,yBAAKjD,UAAWC,IAAOC,QACnB,yBAAKgB,QAAS+B,EAAWjD,UAAWC,IAAOiD,aAC3C,yBAAKlD,UAAWC,IAAOkD,UACnB,yBAAKnD,UAAWC,IAAOsB,SACvB,yBAAKvB,UAAWC,IAAOmD,YACnB,6BAAMJ,EAAQrB,OACd,qDAGR,yBAAK3B,UAAWC,IAAOI,eACvB,yBAAKL,UAAWC,IAAOoD,kB,oBCf5B,SAASC,EAAU5C,GACxB,IAAM6C,EAAQhD,IAAMiD,OAAO,MACnBC,EAAmB/C,EAAnB+C,eAEFC,EAAW,WACf,IAAMzC,EAAQsC,EAAMI,QAAQ1C,MAAM2C,OACpB,KAAV3C,IACFsC,EAAMI,QAAQ1C,MAAQ,GACtBwC,EAAexC,KAUnB,OACM,yBAAKjB,UAAWC,IAAO4D,WACnB,yBAAK7D,UAAWC,IAAO6D,eACvB,2BAAOC,WATE,SAACC,GACK,KAAnBA,EAAMC,UACRP,KAOqCQ,IAAKX,EAAOY,YAAY,qBACvD,4BAAQjD,QAASwC,EAAU1D,UAAWC,IAAOmE,c,oBCrBlD,SAASC,EAAY3D,GAAQ,IAAD,EACPA,EAAM4D,MAAxBrC,EADyB,EACzBA,QAASlB,EADgB,EAChBA,KACXH,EAAgB,IAAIC,KAAKE,GAC/B,OACM,yBAAKf,UAAWC,IAAOsE,aACnB,yBAAKvE,UAAWC,IAAOuE,aACnB,yBAAKxE,UAAWC,IAAO+B,SAAUC,GACjC,yBAAKjC,UAAWC,IAAOwE,WAAY7D,EAAcgB,eAAe,KAAM,CACpEC,KAAM,UACNC,OAAQ,eCJnB,SAAS4C,EAAYhE,GAAQ,IAC1BiE,EAA6BjE,EAA7BiE,SAAU3B,EAAmBtC,EAAnBsC,QAAS4B,EAAUlE,EAAVkE,MAE3B,GAAgB,OAAZ5B,EACF,MAAO,GAET,IAAM6B,EAAmB,GAKzB,OAJAF,EAAShC,SAAQ,SAACmC,GAChB,IAAMN,EAAc,kBAACH,EAAD,CAAaC,MAAOQ,IACxCD,EAAiBhC,KAAK2B,MAGlB,yBAAKI,MAAOA,EAAO5E,UAAWC,IAAO8E,aACjC,kBAAC,EAAU/D,SAAX,MACK,SAACC,GAAD,OACG,kBAAC8B,EAAD,CACIC,QAASA,EACTC,UAAWhC,EAAM+D,cAAc5D,KAAKH,QAIhD,yBAAKjB,UAAWC,IAAOU,MACnB,yBAAKX,UAAWC,IAAOgF,cAClBJ,IAIT,yBAAK7E,UAAWC,IAAOiF,WACnB,kBAAC,EAAUlE,SAAX,MACK,SAACC,GAAD,OACG,kBAACqC,EAAD,CACIG,eAAgBxC,EAAMwC,eAAerC,KAAKH,U,oBC/BzDkE,EAAb,YACE,WAAYzE,GAAQ,IAAD,sBAEjB,IAAM0E,GADN,4CAAM1E,KACe2E,eAFJ,OAGjB,EAAKC,MAAQ,CACX/C,MAAO6C,EAAQ7C,MACfoC,SAAUS,EAAQT,SAClBY,YAAaH,EAAQG,YACrBC,gBAAiB,KACjBC,sBAAuB,KACvBC,YAAa,CACXD,sBAAuB,KACvBE,wBAAyB,OAXZ,EADrB,4EAmBI,IAAMP,EAAU,CACd7C,MAAOqD,KAAKC,MAAMC,aAAaC,QAAQ,UACvCpB,SAAUiB,KAAKC,MAAMC,aAAaC,QAAQ,aAC1CR,YAAaK,KAAKC,MAAMC,aAAaC,QAAQ,iBAO/C,OALKX,EAAQ7C,QACX6C,EAAQ7C,MAAQ,GAChB6C,EAAQT,SAAW,GACnBS,EAAQG,YAAc,GAEjBH,IA7BX,mCAgCeY,GAAS,IACZV,EAAUW,KAAVX,MACRA,EAAMG,sBAAwB,CAC5BS,cAAejG,IAAOkG,gBAExBb,EAAME,gBAAkBQ,EACxBC,KAAKG,SAASd,KAtClB,sCAyCmB,IACPA,EAAUW,KAAVX,MACRA,EAAMG,sBAAwB,CAC5BS,cAAejG,IAAOoG,eAExBJ,KAAKG,SAASd,KA9ClB,qCAiDiBrE,GAA6C,IAAtCqF,EAAqC,uDAArB,KAAMN,EAAe,uDAAN,KAAM,EACrBC,KAAKX,MAAnCE,EADmD,EACnDA,gBAAiBb,EADkC,EAClCA,SAClBA,IACHA,EAAW,IAETqB,IAEFrB,GADAa,EAAkBQ,GACS,GAAK,IAGlC,IAAMhE,EAAU,CACdX,GAAI,OACJY,QAAShB,EACTsF,WAAW,EACXxF,KAAMuF,GAAiB,IAAIzF,KAC3BqB,OAAQ,QAEVyC,EAASa,EAAkB,GAAG3C,KAAKb,GACnCiE,KAAKG,SAASzB,GACTqB,GACHC,KAAKO,iBAEPV,aAAaW,QAAQ,WAAYb,KAAKc,UAAU/B,MAvEpD,sCA0EkB,MAEesB,KAAKX,MAA5B/C,EAFQ,EAERA,MAAOgD,EAFC,EAEDA,YACP7D,EAAOiF,OAAO,uBACdlF,EAAOkF,OAAO,mBACpBpB,GAAe,EACfU,KAAKxC,eAAehC,EAAM,IAAIZ,KAAQ0E,GACtC,IAAMqB,EAAWX,KAAKX,MAAMX,SAASY,EAAc,GACnDhD,EAAMM,KAAK,CACTxB,GAAIkE,EACJ5D,MAAOD,EACPmF,UAAU,EACVC,KAAM,iBACNhG,YAAa8F,EAASA,EAASnE,OAAS,KAG1CwD,KAAKG,SAAS,CAAE7D,QAAOgD,gBACvBU,KAAKO,eAAejB,GACpBO,aAAaW,QAAQ,QAASb,KAAKc,UAAUnE,IAC7CuD,aAAaW,QAAQ,cAAeb,KAAKc,UAAUnB,MA7FvD,uCAgGiC,IAAhBS,EAAe,uDAAN,KAAM,EACAC,KAAKX,MAAzBX,EADoB,EACpBA,SAAUpC,EADU,EACVA,MACZiD,EAAoBS,KAAKX,MAAzBE,gBACFQ,IACFR,EAAkBQ,GAEpB,IAAMe,EAAepC,EAASa,EAAkB,GAChDjD,EAAMiD,EAAkB,GAAG1E,YAAciG,EAAaA,EAAatE,OAAS,GAC5EwD,KAAKG,SAAS7D,GACduD,aAAaW,QAAQ,QAASb,KAAKc,UAAUnE,MAzGjD,+BA4GY,IACA+C,EAAUW,KAAVX,MACR,OACQ,kBAAC,EAAU0B,SAAX,CAAoB/F,MAAOgF,MACvB,yBAAKjG,UAAWC,IAAOgH,WACnB,kBAAC3E,EAAD,CACAC,MAAO+C,EAAM/C,QAEb,kBAACmC,EAAD,CACIE,MAAOU,EAAMG,sBACbzC,QAASsC,EAAME,iBAAmBF,EAAM/C,MAAM+C,EAAME,gBAAkB,GACtEb,SAAUW,EAAME,iBACTF,EAAMX,SAASW,EAAME,gBAAkB,WAxHtE,GAA8BjF,IAAM2G,WCLpCC,iBACE,kBAAC,EAAD,MACAC,SAASC,eAAe,SXkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.599014d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogue\":\"DialogueItem_dialogue__2rBXY\",\"avatar\":\"DialogueItem_avatar__9XARq\",\"wrapper\":\"DialogueItem_wrapper__3lnRQ\",\"text\":\"DialogueItem_text__1WkGt\",\"name\":\"DialogueItem_name__1rMup\",\"time\":\"DialogueItem_time__31wNC\",\"info\":\"DialogueItem_info__WVGza\",\"message\":\"DialogueItem_message__3mEch\",\"status\":\"DialogueItem_status__1zUFk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"ChatHeader_header__wtf1f\",\"backButton\":\"ChatHeader_backButton__2kZvs\",\"chatInfo\":\"ChatHeader_chatInfo__1Q3tD\",\"avatar\":\"ChatHeader_avatar__W2O5Y\",\"senderInfo\":\"ChatHeader_senderInfo__1gAM0\",\"searchButton\":\"ChatHeader_searchButton__30ZIJ\",\"settingsButton\":\"ChatHeader_settingsButton__SLkJ7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"DialoguesHeader_header__1SGyL\",\"menuBurger\":\"DialoguesHeader_menuBurger__icB5p\",\"messenger\":\"DialoguesHeader_messenger__36R73\",\"searchButton\":\"DialoguesHeader_searchButton__1bBEn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageForm\":\"MessageForm_messageForm__8PdEl\",\"messagesList\":\"MessageForm_messagesList__2eLXd\",\"header\":\"MessageForm_header__10-FU\",\"chat\":\"MessageForm_chat__31JWU\",\"inputForm\":\"MessageForm_inputForm__Q4V5O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageWrap\":\"MessageItem_messageWrap__udvmP\",\"messageItem\":\"MessageItem_messageItem__3ZnNZ\",\"message\":\"MessageItem_message__1157w\",\"timestamp\":\"MessageItem_timestamp__30gC_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogues\":\"DialogueForm_dialogues__1D1Xl\",\"dialoguesList\":\"DialogueForm_dialoguesList__2D8k9\",\"empty\":\"DialogueForm_empty__ygZ6X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formInput\":\"FormInput_formInput__1CDjc\",\"attachButton\":\"FormInput_attachButton__2ixoS\",\"sendButton\":\"FormInput_sendButton__22Gjc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MainForm_container__1Ac2B\",\"chatDisappear\":\"MainForm_chatDisappear__2crCV\",\"chatAppearance\":\"MainForm_chatAppearance__2FfsV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createDialogueButton\":\"CreateDialogueButton_createDialogueButton__i92_8\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport styles from '../styles/DialoguesHeader.module.css';\n\n\n// eslint-disable-next-line import/prefer-default-export\nexport function DialoguesHeader() {\n  return (\n        <div className={styles.header}>\n            <div className={styles.menuBurger} />\n            <div className={styles.messenger}>Messenger</div>\n            <div className={styles.searchButton} />\n        </div>\n  );\n}\n","import React from 'react';\n\nconst MyContext = React.createContext(null);\n\nexport default MyContext;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable import/prefer-default-export */\n// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport styles from '../styles/DialogueItem.module.css';\nimport MyContext from './MyContext.Context';\n\n\nexport function DialogueItem(props) {\n  const { chat } = props;\n  const formattedTime = new Date(chat.lastMessage.time);\n  return (\n        <MyContext.Consumer>\n            {(value) => (\n                <div onClick={value.openDialogue.bind(value, chat.id)} className={styles.dialogue}>\n                    <div className={styles.avatar} />\n                    <div className={styles.wrapper}>\n                        <div className={styles.text}>\n                            <div className={styles.name}>{chat.title}</div>\n                            <div className={styles.time}>{formattedTime.toLocaleString('ru', {\n                              hour: 'numeric',\n                              minute: 'numeric',\n                            })}</div>\n                        </div>\n                        <div className={styles.info}>\n                            <div className={styles.message}>{chat.lastMessage.content}</div>\n                            <div className={styles.status}>{chat.lastMessage.status}</div>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </MyContext.Consumer>\n  );\n}\n","import React from 'react';\nimport styles from '../styles/CreateDialogueButton.module.css';\n\n\nexport function CreateDialogueButton(props) {\n  const { createHandler } = props;\n  return (\n        <button\n            onClick={createHandler} className={styles.createDialogueButton}\n        />\n  );\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable import/named */\nimport React from 'react';\nimport styles from '../styles/DialogueForm.module.css';\nimport { DialoguesHeader } from './DialoguesHeader';\nimport { DialogueItem } from './DialogueItem';\nimport { CreateDialogueButton } from './CreateDialogueButton';\nimport MyContext from './MyContext.Context';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function DialogueForm(props) {\n  const { chats } = props;\n\n  let dialogues = [];\n  if (chats.length === 0) {\n    dialogues = <div className={styles.empty}>No messages yet</div>;\n  } else {\n    chats.forEach((chat) => {\n      const dialogueItem = <DialogueItem chat={chat}/>;\n      dialogues.push(dialogueItem);\n    });\n  }\n\n  return (\n        <div className={styles.dialogues}>\n            <DialoguesHeader />\n            <div className={styles.dialogueList}>\n                {dialogues}\n            </div>\n            <MyContext.Consumer>\n                {(value) => (\n                    <CreateDialogueButton createHandler={value.createHandler.bind(value)}/>\n                )}\n\n            </MyContext.Consumer>\n        </div>\n  );\n}\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport styles from '../styles/ChatHeader.module.css';\n\n\n// eslint-disable-next-line import/prefer-default-export\nexport function ChatHeader(props) {\n  const { details, clickBack } = props;\n\n  return (\n        <div className={styles.header}>\n            <div onClick={clickBack} className={styles.backButton} />\n            <div className={styles.chatInfo}>\n                <div className={styles.avatar} />\n                <div className={styles.senderInfo}>\n                    <div>{details.title}</div>\n                    <div>last seen at 12:00</div>\n                </div>\n            </div>\n            <div className={styles.searchButton} />\n            <div className={styles.settingsButton} />\n        </div>\n  );\n}\n","/* eslint-disable import/prefer-default-export */\nimport React from 'react';\nimport styles from '../styles/FormInput.module.css';\n\n\nexport function FormInput(props) {\n  const input = React.useRef(null);\n  const { messageHandler } = props;\n\n  const onSubmit = () => {\n    const value = input.current.value.trim();\n    if (value !== '') {\n      input.current.value = '';\n      messageHandler(value);\n    }\n  };\n\n  const onKeyPress = (event) => {\n    if (event.charCode === 13) {\n      onSubmit();\n    }\n  };\n\n  return (\n        <div className={styles.formInput}>\n            <div className={styles.attachButton} />\n            <input onKeyPress={onKeyPress} ref={input} placeholder='Enter message...' />\n            <button onClick={onSubmit} className={styles.sendButton} />\n        </div>\n  );\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable import/prefer-default-export */\nimport React from 'react';\nimport styles from '../styles/MessageItem.module.css';\n\n\nexport function MessageItem(props) {\n  const { content, time } = props.inner;\n  const formattedTime = new Date(time);\n  return (\n        <div className={styles.messageWrap}>\n            <div className={styles.messageItem}>\n                <div className={styles.message}>{content}</div>\n                <div className={styles.timestamp}>{formattedTime.toLocaleString('ru', {\n                  hour: 'numeric',\n                  minute: 'numeric',\n                })}</div>\n            </div>\n        </div>\n  );\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable import/prefer-default-export */\n/* eslint-disable import/named */\nimport React from 'react';\nimport styles from '../styles/MessageForm.module.css';\nimport { ChatHeader } from './ChatHeader';\nimport { FormInput } from './FormInput';\nimport { MessageItem } from './MessageItem';\nimport MyContext from './MyContext.Context';\n\n\nexport function MessageForm(props) {\n  const { messages, details, style } = props;\n\n  if (details === null) {\n    return '';\n  }\n  const messagesToRender = [];\n  messages.forEach((element) => {\n    const messageItem = <MessageItem inner={element} />;\n    messagesToRender.push(messageItem);\n  });\n  return (\n        <div style={style} className={styles.messageForm}>\n            <MyContext.Consumer>\n                {(value) => (\n                    <ChatHeader\n                        details={details}\n                        clickBack={value.closeDialogue.bind(value)}\n                    />\n                )}\n            </MyContext.Consumer>\n            <div className={styles.chat}>\n                <div className={styles.messagesList}>\n                    {messagesToRender}\n                </div>\n            </div>\n\n            <div className={styles.inputForm}>\n                <MyContext.Consumer>\n                    {(value) => (\n                        <FormInput\n                            messageHandler={value.messageHandler.bind(value)}\n                        />\n                    )}\n                </MyContext.Consumer>\n            </div>\n        </div>\n  );\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable import/prefer-default-export */\n/* eslint-disable import/named */\n/* eslint-disable no-alert */\nimport React from 'react';\nimport { DialogueForm } from './DialogueForm';\nimport { MessageForm } from './MessageForm';\nimport MyContext from './MyContext.Context';\nimport styles from '../styles/MainForm.module.css';\n\n\nexport class MainForm extends React.Component {\n  constructor(props) {\n    super(props);\n    const storage = this.parseStorage();\n    this.state = {\n      chats: storage.chats,\n      messages: storage.messages,\n      chatCounter: storage.chatCounter,\n      currentDialogue: null,\n      MessageFormAppearance: null,\n      frameStyles: {\n        MessageFormAppearance: null,\n        DialoguesFormAppearance: null,\n      },\n    };\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  parseStorage() {\n    const storage = {\n      chats: JSON.parse(localStorage.getItem('chats')),\n      messages: JSON.parse(localStorage.getItem('messages')),\n      chatCounter: JSON.parse(localStorage.getItem('chatCounter')),\n    };\n    if (!storage.chats) {\n      storage.chats = [];\n      storage.messages = {};\n      storage.chatCounter = 0;\n    }\n    return storage;\n  }\n\n  openDialogue(chatId) {\n    const { state } = this;\n    state.MessageFormAppearance = {\n      animationName: styles.chatAppearance,\n    };\n    state.currentDialogue = chatId;\n    this.setState(state);\n  }\n\n  closeDialogue() {\n    const { state } = this;\n    state.MessageFormAppearance = {\n      animationName: styles.chatDisappear,\n    };\n    this.setState(state);\n  }\n\n  messageHandler(value, chatTimestamp = null, chatId = null) {\n    let { currentDialogue, messages } = this.state;\n    if (!messages) {\n      messages = {};\n    }\n    if (chatId) {\n      currentDialogue = chatId;\n      messages[currentDialogue - 1] = [];\n    }\n\n    const message = {\n      id: 'test',\n      content: value,\n      amISender: true,\n      time: chatTimestamp || new Date(),\n      status: 'sent',\n    };\n    messages[currentDialogue - 1].push(message);\n    this.setState(messages);\n    if (!chatId) {\n      this.setLastMessage();\n    }\n    localStorage.setItem('messages', JSON.stringify(messages));\n  }\n\n  createHandler() {\n    // eslint-disable-next-line prefer-const\n    let { chats, chatCounter } = this.state;\n    const name = prompt(\"Enter person's name\");\n    const text = prompt('Write a message');\n    chatCounter += 1;\n    this.messageHandler(text, new Date(), chatCounter);\n    const chatMsgs = this.state.messages[chatCounter - 1];\n    chats.push({\n      id: chatCounter,\n      title: name,\n      is_group: false,\n      host: 'Vladimir Carpa',\n      lastMessage: chatMsgs[chatMsgs.length - 1],\n\n    });\n    this.setState({ chats, chatCounter });\n    this.setLastMessage(chatCounter);\n    localStorage.setItem('chats', JSON.stringify(chats));\n    localStorage.setItem('chatCounter', JSON.stringify(chatCounter));\n  }\n\n  setLastMessage(chatId = null) {\n    const { messages, chats } = this.state;\n    let { currentDialogue } = this.state;\n    if (chatId) {\n      currentDialogue = chatId;\n    }\n    const chatMessages = messages[currentDialogue - 1];\n    chats[currentDialogue - 1].lastMessage = chatMessages[chatMessages.length - 1];\n    this.setState(chats);\n    localStorage.setItem('chats', JSON.stringify(chats));\n  }\n\n  render() {\n    const { state } = this;\n    return (\n            <MyContext.Provider value={this}>\n                <div className={styles.container}>\n                    <DialogueForm\n                    chats={state.chats}\n                    />\n                    <MessageForm\n                        style={state.MessageFormAppearance}\n                        details={state.currentDialogue && state.chats[state.currentDialogue - 1]}\n                        messages={state.currentDialogue\n                            && state.messages[state.currentDialogue - 1]}\n                    />\n                </div>\n            </MyContext.Provider>\n    );\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport './styles/globalStyles.css'\nimport * as serviceWorker from './utils/serviceWorker'\nimport { MainForm } from './components/MainForm'\n\nrender(\n  <MainForm />,\n  document.getElementById('root'),\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}